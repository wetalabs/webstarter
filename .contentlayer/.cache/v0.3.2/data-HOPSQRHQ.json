{
  "cacheItemsMap": {
    "article/test.mdx": {
      "document": {
        "title": "Wetez as data provider in crypto oracle industry",
        "description": "As the earliest group of Chainlink data providers, Wetez is pleased to witness the growth of Chainlink and it now become part of the world’s largest oracle network.",
        "image": "/articleimage/test.png",
        "body": {
          "raw": "\n# Quick Take\n\nOracle solves the problem of transferring data from off-chain to on-chain, while essentially, transferring data is not difficult, the most important thing is to solve the problem of data trust, thus decentralized oracle can avoid creating a single point of failure of the centralized propagator, but accordingly, the decentralized propagator is more expensive to use due to the need to pay for services to multiple nodes.\n\nAs the earliest group of Chainlink data providers, Wetez is very happy to witness the growth of Chainlink who now is the world’s largest oracle network. Oracle data provides important data for what are known as decentralised financial applications (DeFi) and other industries, through which transactions worth several billion US dollars are now processed daily, such as on Aave and Uniswap. Being as the oracles‘ data provider, Wetez is expanding its expertise in the crypto infra and continue providing high-quality, state-of-the-art technology services as a trusted supplier.\n\n# What is oracle?\n\nThe word oracle originated from the role of \"oracle\" in ancient Greek mythology. According to legend, the oracle could communicate with the gods on Mount Olympus, make predictions about the future, and convey the gods' will to the people who prayed for the future, so oracle first had the meaning of \"prophet\". In the theory of computational complexity and computability, an oracle machine is an abstract computer used to study deterministic problems and can be regarded as a Turing machine with a black box (prophet) attached.\n\nWe know that blockchain is a consensus-based network, and the inherent limitations of its consensus mechanism and its deterministic virtual machine stipulate that smart contracts can only passively receive data. Neither can they actively access Internet data nor spontaneously call external network APIs, but most blockchain scenarios such as insurance and lending require active real-time access to data in the real world, especially the Internet.\n\nTherefore, the oracle generally interacts with the execution engine as an independent module of the blockchain or as a third-party service. oracle is a tool for passing off-chain data to on-chain smart contracts and also for transferring on-chain data to the off-chain world. \n\nIt only responsible for the trusted acquisition of data and is not directly involved in the execution of transactions. Among the various oracle projects, most of them act as \"middleware\" between the physical world and the block world, allowing smart contracts to actively access external data. Without the oracle, the only data that a smart contract can use is the data generated on-chain, and it cannot use the external data.\n\n# How is Crypto oracle market?\n\nAs mentioned before, oracle solves the problem of transferring data from off-chain to on-chain, while essentially, transferring data is not difficult, the most important thing is to solve the problem of data trust, how to make the data passed to the chain really trustworthy and reliable is the real problem to be solved by the oracle.\n\nDepending on the design of the trust mechanism, there are three kinds of oracles:\n\n- Centralized oracle\n- Affiliate oracle\n- Decentralized oracle\n\n## Centralized oracle\n\nCentralized oracle uses single data source, usually with data provided by a trusted third party such as a government or a reputable company. It prevents data tampering and loss by separating the data from the local device's untrusted operating system. However, a single centralized data source also poses a potential risk to smart contracts.\n\nSince there is no need for the multiple nodes to cooperate, it saves a lot of time and improves efficiency of the oracle, and because multiple nodes are not needed to support the service, there is no need to pay for a multi-node network and the usage cost is relatively lower.\n\nWhile the disadvantages of centralized oracle is the single source of data and limited data volume, since centralized oracle is based on the user's trust in the institution. A single data source cannot avoid a single point of failure, and there is no restraint on evil-doing, and security is difficult to guarantee.\n\n## Affiliate oracle\n\nAffiliate oracle is a special form of decentralized oracle. The network of nodes is composed of not only normal nodes but also some designated trusted institutions as nodes. For example, the v2 version of MakerDAO's oracle has nodes that include organizations such as dYdX and 0x.\n\nThe source of trust in the affiliate oracle is more complex than the previous two, including trust in the reputable organizations as nodes and the whole network, as well as the node selection mechanism of the affiliate oracle project. Data users need to trust that all these interested parties will not choose to act in a way that harms their own reputation for profit.\n\nThe composition of this node network is somewhat centralized, but as a cost-effective trade-off, it is not a bad choice in the early stage of industry development. It is just that this kind of trust mechanism with centralized coloring may be difficult to carry the demand of smart contracts with too much value.\n\n## Decentralized oracle\n\nA decentralized oracle has distributed consensus mechanism, also known as a consensus Oracle. It obtains data from multiple rather than single external sources, so it is more reliable and does not require trust.\n\nBecause multiple nodes need to work together, the size of the node network of a decentralized prophecy machine affects the reliability of the data it provides, and the data provided by a larger network has higher reliability, so the system usually provides some economic incentives to encourage more nodes to participate.\n\nNodes involved in providing services are also usually required to pledge a portion of their tokens (usually the project tokens themselves) when providing data, and the pledged tokens will be confiscated once the system finds that the node has committed evil acts.\n\nThe decentralized node network can avoid creating a single point of failure of the centralized propagator, but accordingly, the decentralized propagator is more expensive to use due to the need to pay for services to multiple nodes.\n\n# How decentralized oracle works?\n\nWe use Chainlink as an example. It provides data for smart contracts through on-chain reputation contracts, node-matching contracts, aggregation contracts and decentralized off-chain oracle network. Chainlink is the first decentralized oracle project, founded in December 2014. On May 30, 2019, Chainlink was officially launched on the main Ethereum network, with a first-mover advantage and positive network effects, becomes the the most widely used Oracle.\n\nChianlink have multiple independent oracle data providers and a plenty of data sources to increase the decentralization of its network. In addition, in order to guarantee the quality of data and prevent the oracle data providers from doing evil, Chainlink has designed a reputation system and a staking mechanism to rate the performance of chainlink data providers, reward the nodes with LINK for good performance, and deduct the LINK staked by nodes with misbehavior.\n\nGenerally speaking, the workflow of Chainlink can be divided into two parts: on-chain and off-chain. The on-chain module is responsible for connecting the smart contracts of DApp developers and accepting requests for data, while the off-chain module is responsible for listening to requests and obtaining data from data providers.\n\nThe on-chain part of Chainlink consists of three modules, namely, reputation contract, order matching contract and aggregation contract, which are responsible for selecting oracles, reporting data and aggregating data. The lower part of the chain is a network of independent oracle data providers that listen to requests and obtain data from data providers.\n\n# What is decentralized oracle data provider?\n\nOracle node operators also known as the oracle data provider, they are the backbone of decentralized oracle Network. Oracle data provider are the entities running the oracle infrastructure (hardware and software) that powers and secures every oracle network running on the Network. These oracle data providers are responsible for watching the blockchain for new incoming data requests from smart contracts, fetching the requested off-chain data from specified APIs, and delivering the data on-chain where it can be consumed by a smart contract to trigger its execution. Similar to how the Internet connects computers to the outside world, oracles are the bridge between a blockchain and any piece of data or system that exists outside of it.\n\nWetez, as the earliest group of oracle data providers, has been as Chainlink data provider and its data provider network member since 2019. As a part of Chainlink DON network, Wetez offers over 140+ price feeds in three networks. In order to guarantee the neutrality and reliability of data source, Wetez accesses the API interfaces of multiple premium paid data aggregators, such as embedding certificate management capabilities to access password-protected API interfaces When the feed price needs to be updated, Wetez fetches data from multiple data aggregators and returns the median value. Wetez improves service reliability by automatically rejecting outliers and preventing data aggregators' APIs from going offline unexpectedly.\n\nAfter aggregating data, Wetez together with other data providers form a network of DON (decentralized oracle network) that periodically generates oracle reports containing the data points uploaded by each data provider. Every report includes a great number of data points (median data feed) as well as signatures (cryptographic verification). The oracle reports generated by the DON are then stored in a reference smart contract for a specific dataset on the chain (e.g., the reference contract for BTC/USD on Ether). Each time a oracle report is published on the chain, the signature of each data provider is verified before the median is extracted for all data and stored in the reference contract, which cannot be tampered with once the data is stored.\n\nTo maintain a high level of tamper resistance, at least 2/3 of the data providers in a DON need to upload their results and signatures for the oracle report to be accepted on the chain. This prevents a data provider or a small group of data providers from manipulating the final feed price or publishing incomplete oracle reports on the chain. Also, since the oracle report takes the median when it is published, at least half of the oracle data providers must be bribed if the final results stored on the chain and entered into the smart contract are to be manipulated.\n\n# How's Wetez doing?\n\nAs the earliest group of Chainlink data providers, Wetez is pleased to witness the growth of Chainlink and it now become part of the world’s largest oracle network. By offering more than 140+ price feeds in two networks and serving as Chainlink data provider for 4 years, Wetez demonstrates its professional data processing and robust operating ability.\n\nBeing as the professional Web3 infrastructure provider since 2018, Wetez is the critical Web3 infrastructure that provides the tools that enable developers to easily access their blockchain from testing to scaling deployed applications. With 99.9% uptime, over $80 million staking assets for 50+ blockchain projects, over $24 million generated rewards, Wetez provides services that cover from Appchain construction, dApp building, node operation, to API, data storage, data analysis, etc. Wetez will continue to provide robust services and being as the reliable cornerstone for the growing popularity of Web3 and help unlock the next generation of blockchain use cases.",
          "code": "var Component=(()=>{var ct=Object.create;var S=Object.defineProperty;var lt=Object.getOwnPropertyDescriptor;var dt=Object.getOwnPropertyNames;var ut=Object.getPrototypeOf,ft=Object.prototype.hasOwnProperty;var B=(d,a)=>()=>(a||d((a={exports:{}}).exports,a),a.exports),ht=(d,a)=>{for(var b in a)S(d,b,{get:a[b],enumerable:!0})},ye=(d,a,b,_)=>{if(a&&typeof a==\"object\"||typeof a==\"function\")for(let w of dt(a))!ft.call(d,w)&&w!==b&&S(d,w,{get:()=>a[w],enumerable:!(_=lt(a,w))||_.enumerable});return d};var mt=(d,a,b)=>(b=d!=null?ct(ut(d)):{},ye(a||!d||!d.__esModule?S(b,\"default\",{value:d,enumerable:!0}):b,d)),pt=d=>ye(S({},\"__esModule\",{value:!0}),d);var Ne=B((yt,xe)=>{xe.exports=React});var ke=B(G=>{\"use strict\";(function(){\"use strict\";var d=Ne(),a=Symbol.for(\"react.element\"),b=Symbol.for(\"react.portal\"),_=Symbol.for(\"react.fragment\"),w=Symbol.for(\"react.strict_mode\"),H=Symbol.for(\"react.profiler\"),K=Symbol.for(\"react.provider\"),X=Symbol.for(\"react.context\"),z=Symbol.for(\"react.forward_ref\"),A=Symbol.for(\"react.suspense\"),j=Symbol.for(\"react.suspense_list\"),R=Symbol.for(\"react.memo\"),W=Symbol.for(\"react.lazy\"),Re=Symbol.for(\"react.offscreen\"),J=Symbol.iterator,Te=\"@@iterator\";function Ce(e){if(e===null||typeof e!=\"object\")return null;var t=J&&e[J]||e[Te];return typeof t==\"function\"?t:null}var x=d.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function h(e){{for(var t=arguments.length,r=new Array(t>1?t-1:0),o=1;o<t;o++)r[o-1]=arguments[o];Oe(\"error\",e,r)}}function Oe(e,t,r){{var o=x.ReactDebugCurrentFrame,c=o.getStackAddendum();c!==\"\"&&(t+=\"%s\",r=r.concat([c]));var l=r.map(function(s){return String(s)});l.unshift(\"Warning: \"+t),Function.prototype.apply.call(console[e],console,l)}}var Pe=!1,Ue=!1,Se=!1,Ae=!1,je=!1,Q;Q=Symbol.for(\"react.module.reference\");function We(e){return!!(typeof e==\"string\"||typeof e==\"function\"||e===_||e===H||je||e===w||e===A||e===j||Ae||e===Re||Pe||Ue||Se||typeof e==\"object\"&&e!==null&&(e.$$typeof===W||e.$$typeof===R||e.$$typeof===K||e.$$typeof===X||e.$$typeof===z||e.$$typeof===Q||e.getModuleId!==void 0))}function Ie(e,t,r){var o=e.displayName;if(o)return o;var c=t.displayName||t.name||\"\";return c!==\"\"?r+\"(\"+c+\")\":r}function Z(e){return e.displayName||\"Context\"}function v(e){if(e==null)return null;if(typeof e.tag==\"number\"&&h(\"Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.\"),typeof e==\"function\")return e.displayName||e.name||null;if(typeof e==\"string\")return e;switch(e){case _:return\"Fragment\";case b:return\"Portal\";case H:return\"Profiler\";case w:return\"StrictMode\";case A:return\"Suspense\";case j:return\"SuspenseList\"}if(typeof e==\"object\")switch(e.$$typeof){case X:var t=e;return Z(t)+\".Consumer\";case K:var r=e;return Z(r._context)+\".Provider\";case z:return Ie(e,e.render,\"ForwardRef\");case R:var o=e.displayName||null;return o!==null?o:v(e.type)||\"Memo\";case W:{var c=e,l=c._payload,s=c._init;try{return v(s(l))}catch{return null}}}return null}var y=Object.assign,E=0,ee,te,re,ae,ne,oe,ie;function se(){}se.__reactDisabledLog=!0;function Fe(){{if(E===0){ee=console.log,te=console.info,re=console.warn,ae=console.error,ne=console.group,oe=console.groupCollapsed,ie=console.groupEnd;var e={configurable:!0,enumerable:!0,value:se,writable:!0};Object.defineProperties(console,{info:e,log:e,warn:e,error:e,group:e,groupCollapsed:e,groupEnd:e})}E++}}function $e(){{if(E--,E===0){var e={configurable:!0,enumerable:!0,writable:!0};Object.defineProperties(console,{log:y({},e,{value:ee}),info:y({},e,{value:te}),warn:y({},e,{value:re}),error:y({},e,{value:ae}),group:y({},e,{value:ne}),groupCollapsed:y({},e,{value:oe}),groupEnd:y({},e,{value:ie})})}E<0&&h(\"disabledDepth fell below zero. This is a bug in React. Please file an issue.\")}}var I=x.ReactCurrentDispatcher,F;function T(e,t,r){{if(F===void 0)try{throw Error()}catch(c){var o=c.stack.trim().match(/\\n( *(at )?)/);F=o&&o[1]||\"\"}return`\n`+F+e}}var $=!1,C;{var Ye=typeof WeakMap==\"function\"?WeakMap:Map;C=new Ye}function ce(e,t){if(!e||$)return\"\";{var r=C.get(e);if(r!==void 0)return r}var o;$=!0;var c=Error.prepareStackTrace;Error.prepareStackTrace=void 0;var l;l=I.current,I.current=null,Fe();try{if(t){var s=function(){throw Error()};if(Object.defineProperty(s.prototype,\"props\",{set:function(){throw Error()}}),typeof Reflect==\"object\"&&Reflect.construct){try{Reflect.construct(s,[])}catch(g){o=g}Reflect.construct(e,[],s)}else{try{s.call()}catch(g){o=g}e.call(s.prototype)}}else{try{throw Error()}catch(g){o=g}e()}}catch(g){if(g&&o&&typeof g.stack==\"string\"){for(var i=g.stack.split(`\n`),m=o.stack.split(`\n`),u=i.length-1,f=m.length-1;u>=1&&f>=0&&i[u]!==m[f];)f--;for(;u>=1&&f>=0;u--,f--)if(i[u]!==m[f]){if(u!==1||f!==1)do if(u--,f--,f<0||i[u]!==m[f]){var p=`\n`+i[u].replace(\" at new \",\" at \");return e.displayName&&p.includes(\"<anonymous>\")&&(p=p.replace(\"<anonymous>\",e.displayName)),typeof e==\"function\"&&C.set(e,p),p}while(u>=1&&f>=0);break}}}finally{$=!1,I.current=l,$e(),Error.prepareStackTrace=c}var k=e?e.displayName||e.name:\"\",_e=k?T(k):\"\";return typeof e==\"function\"&&C.set(e,_e),_e}function Me(e,t,r){return ce(e,!1)}function Ve(e){var t=e.prototype;return!!(t&&t.isReactComponent)}function O(e,t,r){if(e==null)return\"\";if(typeof e==\"function\")return ce(e,Ve(e));if(typeof e==\"string\")return T(e);switch(e){case A:return T(\"Suspense\");case j:return T(\"SuspenseList\")}if(typeof e==\"object\")switch(e.$$typeof){case z:return Me(e.render);case R:return O(e.type,t,r);case W:{var o=e,c=o._payload,l=o._init;try{return O(l(c),t,r)}catch{}}}return\"\"}var P=Object.prototype.hasOwnProperty,le={},de=x.ReactDebugCurrentFrame;function U(e){if(e){var t=e._owner,r=O(e.type,e._source,t?t.type:null);de.setExtraStackFrame(r)}else de.setExtraStackFrame(null)}function Le(e,t,r,o,c){{var l=Function.call.bind(P);for(var s in e)if(l(e,s)){var i=void 0;try{if(typeof e[s]!=\"function\"){var m=Error((o||\"React class\")+\": \"+r+\" type `\"+s+\"` is invalid; it must be a function, usually from the `prop-types` package, but received `\"+typeof e[s]+\"`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.\");throw m.name=\"Invariant Violation\",m}i=e[s](t,s,o,r,null,\"SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED\")}catch(u){i=u}i&&!(i instanceof Error)&&(U(c),h(\"%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).\",o||\"React class\",r,s,typeof i),U(null)),i instanceof Error&&!(i.message in le)&&(le[i.message]=!0,U(c),h(\"Failed %s type: %s\",r,i.message),U(null))}}}var qe=Array.isArray;function Y(e){return qe(e)}function Be(e){{var t=typeof Symbol==\"function\"&&Symbol.toStringTag,r=t&&e[Symbol.toStringTag]||e.constructor.name||\"Object\";return r}}function Ge(e){try{return ue(e),!1}catch{return!0}}function ue(e){return\"\"+e}function fe(e){if(Ge(e))return h(\"The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.\",Be(e)),ue(e)}var D=x.ReactCurrentOwner,He={key:!0,ref:!0,__self:!0,__source:!0},he,me,M;M={};function Ke(e){if(P.call(e,\"ref\")){var t=Object.getOwnPropertyDescriptor(e,\"ref\").get;if(t&&t.isReactWarning)return!1}return e.ref!==void 0}function Xe(e){if(P.call(e,\"key\")){var t=Object.getOwnPropertyDescriptor(e,\"key\").get;if(t&&t.isReactWarning)return!1}return e.key!==void 0}function Je(e,t){if(typeof e.ref==\"string\"&&D.current&&t&&D.current.stateNode!==t){var r=v(D.current.type);M[r]||(h('Component \"%s\" contains the string ref \"%s\". Support for string refs will be removed in a future major release. This case cannot be automatically converted to an arrow function. We ask you to manually fix this case by using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref',v(D.current.type),e.ref),M[r]=!0)}}function Qe(e,t){{var r=function(){he||(he=!0,h(\"%s: `key` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",t))};r.isReactWarning=!0,Object.defineProperty(e,\"key\",{get:r,configurable:!0})}}function Ze(e,t){{var r=function(){me||(me=!0,h(\"%s: `ref` is not a prop. Trying to access it will result in `undefined` being returned. If you need to access the same value within the child component, you should pass it as a different prop. (https://reactjs.org/link/special-props)\",t))};r.isReactWarning=!0,Object.defineProperty(e,\"ref\",{get:r,configurable:!0})}}var et=function(e,t,r,o,c,l,s){var i={$$typeof:a,type:e,key:t,ref:r,props:s,_owner:l};return i._store={},Object.defineProperty(i._store,\"validated\",{configurable:!1,enumerable:!1,writable:!0,value:!1}),Object.defineProperty(i,\"_self\",{configurable:!1,enumerable:!1,writable:!1,value:o}),Object.defineProperty(i,\"_source\",{configurable:!1,enumerable:!1,writable:!1,value:c}),Object.freeze&&(Object.freeze(i.props),Object.freeze(i)),i};function tt(e,t,r,o,c){{var l,s={},i=null,m=null;r!==void 0&&(fe(r),i=\"\"+r),Xe(t)&&(fe(t.key),i=\"\"+t.key),Ke(t)&&(m=t.ref,Je(t,c));for(l in t)P.call(t,l)&&!He.hasOwnProperty(l)&&(s[l]=t[l]);if(e&&e.defaultProps){var u=e.defaultProps;for(l in u)s[l]===void 0&&(s[l]=u[l])}if(i||m){var f=typeof e==\"function\"?e.displayName||e.name||\"Unknown\":e;i&&Qe(s,f),m&&Ze(s,f)}return et(e,i,m,c,o,D.current,s)}}var V=x.ReactCurrentOwner,pe=x.ReactDebugCurrentFrame;function N(e){if(e){var t=e._owner,r=O(e.type,e._source,t?t.type:null);pe.setExtraStackFrame(r)}else pe.setExtraStackFrame(null)}var L;L=!1;function q(e){return typeof e==\"object\"&&e!==null&&e.$$typeof===a}function be(){{if(V.current){var e=v(V.current.type);if(e)return`\n\nCheck the render method of \\``+e+\"`.\"}return\"\"}}function rt(e){{if(e!==void 0){var t=e.fileName.replace(/^.*[\\\\\\/]/,\"\"),r=e.lineNumber;return`\n\nCheck your code at `+t+\":\"+r+\".\"}return\"\"}}var ve={};function at(e){{var t=be();if(!t){var r=typeof e==\"string\"?e:e.displayName||e.name;r&&(t=`\n\nCheck the top-level render call using <`+r+\">.\")}return t}}function ge(e,t){{if(!e._store||e._store.validated||e.key!=null)return;e._store.validated=!0;var r=at(t);if(ve[r])return;ve[r]=!0;var o=\"\";e&&e._owner&&e._owner!==V.current&&(o=\" It was passed a child from \"+v(e._owner.type)+\".\"),N(e),h('Each child in a list should have a unique \"key\" prop.%s%s See https://reactjs.org/link/warning-keys for more information.',r,o),N(null)}}function we(e,t){{if(typeof e!=\"object\")return;if(Y(e))for(var r=0;r<e.length;r++){var o=e[r];q(o)&&ge(o,t)}else if(q(e))e._store&&(e._store.validated=!0);else if(e){var c=Ce(e);if(typeof c==\"function\"&&c!==e.entries)for(var l=c.call(e),s;!(s=l.next()).done;)q(s.value)&&ge(s.value,t)}}}function nt(e){{var t=e.type;if(t==null||typeof t==\"string\")return;var r;if(typeof t==\"function\")r=t.propTypes;else if(typeof t==\"object\"&&(t.$$typeof===z||t.$$typeof===R))r=t.propTypes;else return;if(r){var o=v(t);Le(r,e.props,\"prop\",o,e)}else if(t.PropTypes!==void 0&&!L){L=!0;var c=v(t);h(\"Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?\",c||\"Unknown\")}typeof t.getDefaultProps==\"function\"&&!t.getDefaultProps.isReactClassApproved&&h(\"getDefaultProps is only used on classic React.createClass definitions. Use a static property named `defaultProps` instead.\")}}function ot(e){{for(var t=Object.keys(e.props),r=0;r<t.length;r++){var o=t[r];if(o!==\"children\"&&o!==\"key\"){N(e),h(\"Invalid prop `%s` supplied to `React.Fragment`. React.Fragment can only have `key` and `children` props.\",o),N(null);break}}e.ref!==null&&(N(e),h(\"Invalid attribute `ref` supplied to `React.Fragment`.\"),N(null))}}function it(e,t,r,o,c,l){{var s=We(e);if(!s){var i=\"\";(e===void 0||typeof e==\"object\"&&e!==null&&Object.keys(e).length===0)&&(i+=\" You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.\");var m=rt(c);m?i+=m:i+=be();var u;e===null?u=\"null\":Y(e)?u=\"array\":e!==void 0&&e.$$typeof===a?(u=\"<\"+(v(e.type)||\"Unknown\")+\" />\",i=\" Did you accidentally export a JSX literal instead of a component?\"):u=typeof e,h(\"React.jsx: type is invalid -- expected a string (for built-in components) or a class/function (for composite components) but got: %s.%s\",u,i)}var f=tt(e,t,r,c,l);if(f==null)return f;if(s){var p=t.children;if(p!==void 0)if(o)if(Y(p)){for(var k=0;k<p.length;k++)we(p[k],e);Object.freeze&&Object.freeze(p)}else h(\"React.jsx: Static children should always be an array. You are likely explicitly calling React.jsxs or React.jsxDEV. Use the Babel transform instead.\");else we(p,e)}return e===_?ot(f):nt(f),f}}var st=it;G.Fragment=_,G.jsxDEV=st})()});var De=B((Nt,Ee)=>{\"use strict\";Ee.exports=ke()});var wt={};ht(wt,{default:()=>gt,frontmatter:()=>bt});var n=mt(De()),bt={title:\"Wetez as data provider in crypto oracle industry\",description:\"As the earliest group of Chainlink data providers, Wetez is pleased to witness the growth of Chainlink and it now become part of the world\\u2019s largest oracle network.\",image:\"/articleimage/test.png\"};function ze(d){let a=Object.assign({h1:\"h1\",p:\"p\",ul:\"ul\",li:\"li\",h2:\"h2\"},d.components);return(0,n.jsxDEV)(n.Fragment,{children:[(0,n.jsxDEV)(a.h1,{children:\"Quick Take\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:7,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Oracle solves the problem of transferring data from off-chain to on-chain, while essentially, transferring data is not difficult, the most important thing is to solve the problem of data trust, thus decentralized oracle can avoid creating a single point of failure of the centralized propagator, but accordingly, the decentralized propagator is more expensive to use due to the need to pay for services to multiple nodes.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:9,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"As the earliest group of Chainlink data providers, Wetez is very happy to witness the growth of Chainlink who now is the world\\u2019s largest oracle network. Oracle data provides important data for what are known as decentralised financial applications (DeFi) and other industries, through which transactions worth several billion US dollars are now processed daily, such as on Aave and Uniswap. Being as the oracles\\u2018 data provider, Wetez is expanding its expertise in the crypto infra and continue providing high-quality, state-of-the-art technology services as a trusted supplier.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:11,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.h1,{children:\"What is oracle?\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:13,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:`The word oracle originated from the role of \"oracle\" in ancient Greek mythology. According to legend, the oracle could communicate with the gods on Mount Olympus, make predictions about the future, and convey the gods' will to the people who prayed for the future, so oracle first had the meaning of \"prophet\". In the theory of computational complexity and computability, an oracle machine is an abstract computer used to study deterministic problems and can be regarded as a Turing machine with a black box (prophet) attached.`},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:15,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"We know that blockchain is a consensus-based network, and the inherent limitations of its consensus mechanism and its deterministic virtual machine stipulate that smart contracts can only passively receive data. Neither can they actively access Internet data nor spontaneously call external network APIs, but most blockchain scenarios such as insurance and lending require active real-time access to data in the real world, especially the Internet.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:17,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Therefore, the oracle generally interacts with the execution engine as an independent module of the blockchain or as a third-party service. oracle is a tool for passing off-chain data to on-chain smart contracts and also for transferring on-chain data to the off-chain world.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:19,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:'It only responsible for the trusted acquisition of data and is not directly involved in the execution of transactions. Among the various oracle projects, most of them act as \"middleware\" between the physical world and the block world, allowing smart contracts to actively access external data. Without the oracle, the only data that a smart contract can use is the data generated on-chain, and it cannot use the external data.'},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:21,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.h1,{children:\"How is Crypto oracle market?\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:23,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"As mentioned before, oracle solves the problem of transferring data from off-chain to on-chain, while essentially, transferring data is not difficult, the most important thing is to solve the problem of data trust, how to make the data passed to the chain really trustworthy and reliable is the real problem to be solved by the oracle.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:25,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Depending on the design of the trust mechanism, there are three kinds of oracles:\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:27,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.ul,{children:[`\n`,(0,n.jsxDEV)(a.li,{children:\"Centralized oracle\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:29,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.li,{children:\"Affiliate oracle\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:30,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.li,{children:\"Decentralized oracle\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:31,columnNumber:1},this),`\n`]},void 0,!0,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:29,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.h2,{children:\"Centralized oracle\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:33,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Centralized oracle uses single data source, usually with data provided by a trusted third party such as a government or a reputable company. It prevents data tampering and loss by separating the data from the local device's untrusted operating system. However, a single centralized data source also poses a potential risk to smart contracts.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:35,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Since there is no need for the multiple nodes to cooperate, it saves a lot of time and improves efficiency of the oracle, and because multiple nodes are not needed to support the service, there is no need to pay for a multi-node network and the usage cost is relatively lower.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:37,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"While the disadvantages of centralized oracle is the single source of data and limited data volume, since centralized oracle is based on the user's trust in the institution. A single data source cannot avoid a single point of failure, and there is no restraint on evil-doing, and security is difficult to guarantee.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:39,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.h2,{children:\"Affiliate oracle\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:41,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Affiliate oracle is a special form of decentralized oracle. The network of nodes is composed of not only normal nodes but also some designated trusted institutions as nodes. For example, the v2 version of MakerDAO's oracle has nodes that include organizations such as dYdX and 0x.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:43,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"The source of trust in the affiliate oracle is more complex than the previous two, including trust in the reputable organizations as nodes and the whole network, as well as the node selection mechanism of the affiliate oracle project. Data users need to trust that all these interested parties will not choose to act in a way that harms their own reputation for profit.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:45,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"The composition of this node network is somewhat centralized, but as a cost-effective trade-off, it is not a bad choice in the early stage of industry development. It is just that this kind of trust mechanism with centralized coloring may be difficult to carry the demand of smart contracts with too much value.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:47,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.h2,{children:\"Decentralized oracle\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:49,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"A decentralized oracle has distributed consensus mechanism, also known as a consensus Oracle. It obtains data from multiple rather than single external sources, so it is more reliable and does not require trust.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:51,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Because multiple nodes need to work together, the size of the node network of a decentralized prophecy machine affects the reliability of the data it provides, and the data provided by a larger network has higher reliability, so the system usually provides some economic incentives to encourage more nodes to participate.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:53,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Nodes involved in providing services are also usually required to pledge a portion of their tokens (usually the project tokens themselves) when providing data, and the pledged tokens will be confiscated once the system finds that the node has committed evil acts.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:55,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"The decentralized node network can avoid creating a single point of failure of the centralized propagator, but accordingly, the decentralized propagator is more expensive to use due to the need to pay for services to multiple nodes.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:57,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.h1,{children:\"How decentralized oracle works?\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:59,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"We use Chainlink as an example. It provides data for smart contracts through on-chain reputation contracts, node-matching contracts, aggregation contracts and decentralized off-chain oracle network. Chainlink is the first decentralized oracle project, founded in December 2014. On May 30, 2019, Chainlink was officially launched on the main Ethereum network, with a first-mover advantage and positive network effects, becomes the the most widely used Oracle.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:61,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Chianlink have multiple independent oracle data providers and a plenty of data sources to increase the decentralization of its network. In addition, in order to guarantee the quality of data and prevent the oracle data providers from doing evil, Chainlink has designed a reputation system and a staking mechanism to rate the performance of chainlink data providers, reward the nodes with LINK for good performance, and deduct the LINK staked by nodes with misbehavior.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:63,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Generally speaking, the workflow of Chainlink can be divided into two parts: on-chain and off-chain. The on-chain module is responsible for connecting the smart contracts of DApp developers and accepting requests for data, while the off-chain module is responsible for listening to requests and obtaining data from data providers.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:65,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"The on-chain part of Chainlink consists of three modules, namely, reputation contract, order matching contract and aggregation contract, which are responsible for selecting oracles, reporting data and aggregating data. The lower part of the chain is a network of independent oracle data providers that listen to requests and obtain data from data providers.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:67,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.h1,{children:\"What is decentralized oracle data provider?\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:69,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Oracle node operators also known as the oracle data provider, they are the backbone of decentralized oracle Network. Oracle data provider are the entities running the\\xA0oracle infrastructure (hardware and software) that powers and secures every oracle network running on the Network. These oracle data providers are responsible for watching the blockchain for new incoming data requests from smart contracts, fetching the requested off-chain data from specified APIs, and delivering the data on-chain where it can be consumed by a smart contract to trigger its execution. Similar to how the Internet connects computers to the outside world, oracles are the bridge between a blockchain and any piece of data or system that exists outside of it.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:71,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Wetez, as the earliest group of oracle data providers, has been as Chainlink data provider and its data provider network member since 2019. As a part of Chainlink DON network, Wetez offers over 140+ price feeds in three networks. In order to guarantee the neutrality and reliability of data source, Wetez accesses the API interfaces of multiple premium paid data aggregators, such as embedding certificate management capabilities to access password-protected API interfaces When the feed price needs to be updated, Wetez fetches data from multiple data aggregators and returns the median value. Wetez improves service reliability by automatically rejecting outliers and preventing data aggregators' APIs from going offline unexpectedly.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:73,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"After aggregating data, Wetez together with other data providers form a network of DON (decentralized oracle network) that periodically generates oracle reports containing the data points uploaded by each data provider. Every report includes a great number of data points (median data feed) as well as signatures (cryptographic verification). The oracle reports generated by the DON are then stored in a reference smart contract for a specific dataset on the chain (e.g., the reference contract for BTC/USD on Ether). Each time a oracle report is published on the chain, the signature of each data provider is verified before the median is extracted for all data and stored in the reference contract, which cannot be tampered with once the data is stored.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:75,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"To maintain a high level of tamper resistance, at least 2/3 of the data providers in a DON need to upload their results and signatures for the oracle report to be accepted on the chain. This prevents a data provider or a small group of data providers from manipulating the final feed price or publishing incomplete oracle reports on the chain. Also, since the oracle report takes the median when it is published, at least half of the oracle data providers must be bribed if the final results stored on the chain and entered into the smart contract are to be manipulated.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:77,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.h1,{children:\"How's Wetez doing?\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:79,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"As the earliest group of Chainlink data providers, Wetez is pleased to witness the growth of Chainlink and it now become part of the world\\u2019s largest oracle network. By offering more than 140+ price feeds in two networks and serving as Chainlink data provider for 4 years, Wetez demonstrates its professional data processing and robust operating ability.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:81,columnNumber:1},this),`\n`,(0,n.jsxDEV)(a.p,{children:\"Being as the professional Web3 infrastructure provider since 2018, Wetez is the critical Web3 infrastructure that provides the tools that enable developers to easily access their blockchain from testing to scaling deployed applications. With 99.9% uptime, over $80 million staking assets for 50+ blockchain projects, over $24 million generated rewards, Wetez provides services that cover from Appchain construction, dApp building, node operation, to API, data storage, data analysis, etc. Wetez will continue to provide robust services and being as the reliable cornerstone for the growing popularity of Web3 and help unlock the next generation of blockchain use cases.\"},void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:83,columnNumber:1},this)]},void 0,!0,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\",lineNumber:1,columnNumber:1},this)}function vt(d={}){let{wrapper:a}=d.components||{};return a?(0,n.jsxDEV)(a,Object.assign({},d,{children:(0,n.jsxDEV)(ze,d,void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\"},this)}),void 0,!1,{fileName:\"/Users/zhaoxu/Documents/codewarehouse/webstarter/content/article/_mdx_bundler_entry_point-21016fc0-a9bc-4f70-ade3-cf86c7693a26.mdx\"},this):ze(d)}var gt=vt;return pt(wt);})();\n/*! Bundled license information:\n\nreact/cjs/react-jsx-dev-runtime.development.js:\n  (**\n   * @license React\n   * react-jsx-dev-runtime.development.js\n   *\n   * Copyright (c) Facebook, Inc. and its affiliates.\n   *\n   * This source code is licensed under the MIT license found in the\n   * LICENSE file in the root directory of this source tree.\n   *)\n*/\n;return Component;"
        },
        "_id": "article/test.mdx",
        "_raw": {
          "sourceFilePath": "article/test.mdx",
          "sourceFileName": "test.mdx",
          "sourceFileDir": "article",
          "contentType": "mdx",
          "flattenedPath": "article/test"
        },
        "type": "Article",
        "slug": "/article/test",
        "slugAsParams": "test"
      },
      "documentHash": "1685368585684",
      "hasWarnings": false,
      "documentTypeName": "Article"
    }
  }
}
